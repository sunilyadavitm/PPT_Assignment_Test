****Q1.What is ORM in Hibernate?****

Ans. ORM stands for Object-Relational Mapping. 
It is a programming technique that maps the object-oriented domain model to the relational database model. 
Hibernate is an ORM tool that provides a framework for mapping an object-oriented domain model to a relational database.

Hibernate ORM is an open-source project that provides an object-relational mapping (ORM) framework for the Java programming language. 
Hibernate's primary feature is mapping from Java classes to database tables, and mapping from Java data types to SQL data types.
Hibernate also provides data query and retrieval facilities.



****Q2.What are the advantages of Hibernate over JDBC?****

Ans.Hibernate is an ORM tool that provides a framework for mapping an object-oriented domain model to a relational database.
It has several advantages over JDBC:

- Hibernate is database independent, which means it can work with any database.
- Hibernate provides a simple API for storing and retrieving Java objects directly to and from the database.
- Hibernate provides transparent persistence, which means that the application does not need to know how the data is stored in the database.
- Hibernate provides caching support, which can improve performance by reducing the number of database queries.
- Hibernate provides support for lazy loading, which means that data is loaded only when it is needed.

  


****Q3.What are some of the important interfaces of Hibernate framework?****

Ans. Hibernate framework provides several interfaces that are important for its functioning. Some of the important interfaces of Hibernate framework are:

- SessionFactory: It is an interface that provides a factory for creating Session objects.
- Session: It is an interface that provides methods for querying and manipulating the database.
- Transaction: It is an interface that provides methods for managing transactions.
- Query: It is an interface that provides methods for executing HQL (Hibernate Query Language) queries.
- Criteria: It is an interface that provides methods for creating criteria queries.



****Q4.What is a Session in Hibernate?****

Ans. A Session in Hibernate is a lightweight object that represents a single unit of work with the database. It provides methods for querying and manipulating the database.
A Session is used to create, read, update, and delete persistent objects. It also provides transaction management and caching support.

A SessionFactory is used to create Session objects. A SessionFactory is a thread-safe object that should be created only once during the application's lifetime.

  

****Q5.What is a SessionFactory?****

Ans.A SessionFactory in Hibernate is a thread-safe object that is used to create Session objects. 
It is an expensive object that should be created only once during the application's lifetime. 
A SessionFactory is responsible for initializing Hibernate's internal state and providing a factory for creating Session objects.

A SessionFactory is created by passing a Configuration object to its constructor.
The Configuration object contains information about the database connection and the mapping between Java classes and database tables.



****Q6.What is HQL?****

Ans. HQL stands for Hibernate Query Language. It is an object-oriented query language that is used to query the database using Hibernate. 
HQL is similar to SQL, but it uses object-oriented concepts like classes and objects instead of tables and rows.

HQL queries are translated into SQL queries by Hibernate at runtime. HQL supports a wide range of operations like SELECT, INSERT, UPDATE, DELETE, and JOIN.




****Q7.What are Many to Many associations?****

Ans.Many-to-many associations are associations between two entities where one entity can have multiple instances of the other entity, and vice versa.
In Hibernate, many-to-many associations are implemented using a join table.

A join table is a table that is used to store the associations between two entities. 
It contains foreign keys to both entities and is used to map the relationships between them.

In Hibernate, many-to-many associations are represented using the @ManyToMany annotation. 
The @ManyToMany annotation is used to specify the join table and the columns that are used to map the relationship.

  


****Q8.What is hibernate caching?****

Ans. Hibernate caching is a mechanism that is used to improve the performance of Hibernate applications.
Caching is the process of storing frequently accessed data in memory so that it can be retrieved quickly when needed.

Hibernate provides two levels of caching:

- First-level cache: It is also known as session cache. It is enabled by default and is used to cache objects within a single Hibernate session.
The first-level cache is associated with the Session object and is cleared when the session is closed.
- Second-level cache: It is a shared cache that is used to cache objects across multiple sessions. 
The second-level cache is not enabled by default and must be configured explicitly.

  


****Q9.What is the difference between first level cache and second level cache?****

Ans. The main difference between the first-level cache and the second-level cache is that the first-level
cache is associated with a single Hibernate session, while the second-level cache is shared across multiple sessions.

The first-level cache is enabled by default and is used to cache objects within a single Hibernate session.
The first-level cache is associated with the Session object and is cleared when the session is closed.

The second-level cache is not enabled by default and must be configured explicitly. 
It is a shared cache that is used to cache objects across multiple sessions. The second-level cache can be used to improve the performance 
of Hibernate applications by reducing the number of database queries that are executed.




****Q10.What can you tell about Hibernate Configuration File?****

Ans. The Hibernate Configuration File is an XML file that is used to configure Hibernate. 
It contains information about the database connection and the mapping between Java classes and database tables.

The Configuration object is used to read the Hibernate Configuration File and create a SessionFactory object. 
The Configuration object is also used to configure Hibernate's internal state.

The Hibernate Configuration File contains the following information:

- Database connection information: It contains information about the database driver class, the database URL, the username, and the password.
- Mapping information: It contains information about the mapping between Java classes and database tables.
- Hibernate properties: It contains various properties that are used to configure Hibernate's internal state.

  


